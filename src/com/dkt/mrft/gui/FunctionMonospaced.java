/*
 * MIT License
 *
 * Copyright (c) 2016 Federico Vera <https://github.com/dktcoding>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.dkt.mrft.gui;

import com.dkt.mrft.funcs.FunctionsRandom;
import com.dkt.mrft.models.DatasetTableModel;
import com.dkt.mrft.utils.BundleDecorator;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import net.objecthunter.exp4j.Expression;
import net.objecthunter.exp4j.ExpressionBuilder;
import net.objecthunter.exp4j.ValidationResult;
import net.objecthunter.exp4j.extras.FunctionsBoolean;
import net.objecthunter.exp4j.extras.FunctionsMisc;
import net.objecthunter.exp4j.extras.OperatorsComparison;

/**
 *
 * @author Federico Vera {@literal <fedevera at unc.edu.ar>}
 */
public final class FunctionMonospaced extends JDialog {
    private static final BundleDecorator i18n = new BundleDecorator("res.i18n.dialogs");   
    
    private final MainWindow father;
    /**
     * Creates new form FunctionMonospaced
     * @param father
     */
    public FunctionMonospaced(MainWindow father) {
        super((JFrame)null, true);
        this.father = father;
        initComponents();
        initListners();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ResourceBundle bundle = ResourceBundle.getBundle("res/i18n/dialogs"); // NOI18N
        setTitle(bundle.getString("F_MONO_TITLE")); // NOI18N

        jLabel1.setText(bundle.getString("F_MONO_FUNC")); // NOI18N

        jTextField1.setText("sin(x)");

        jLabel2.setIcon(new ImageIcon(getClass().getResource("/res/icons/warn.png"))); // NOI18N

        jLabel3.setText(bundle.getString("F_MONO_START")); // NOI18N

        jLabel4.setText(bundle.getString("F_MONO_END")); // NOI18N

        jLabel5.setText(bundle.getString("F_MONO_STEP")); // NOI18N

        jButton1.setText(bundle.getString("F_MONO_GENERATE")); // NOI18N
        jButton1.setEnabled(false);
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("F_MONO_CLOSE")); // NOI18N
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText(bundle.getString("F_MONO_N_VALS")); // NOI18N

        jFormattedTextField1.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter()));
        jFormattedTextField1.setHorizontalAlignment(JTextField.CENTER);

        jFormattedTextField2.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter()));
        jFormattedTextField2.setHorizontalAlignment(JTextField.CENTER);

        jFormattedTextField3.setFormatterFactory(new DefaultFormatterFactory(new NumberFormatter()));
        jFormattedTextField3.setHorizontalAlignment(JTextField.CENTER);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jFormattedTextField1, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jFormattedTextField3, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jFormattedTextField2, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {jButton1, jButton2});

        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jFormattedTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean out;
    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        out = false;
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        out = true;
        setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final JButton jButton1 = new JButton();
    private final JButton jButton2 = new JButton();
    private final JFormattedTextField jFormattedTextField1 = new JFormattedTextField();
    private final JFormattedTextField jFormattedTextField2 = new JFormattedTextField();
    private final JFormattedTextField jFormattedTextField3 = new JFormattedTextField();
    private final JLabel jLabel1 = new JLabel();
    private final JLabel jLabel2 = new JLabel();
    private final JLabel jLabel3 = new JLabel();
    private final JLabel jLabel4 = new JLabel();
    private final JLabel jLabel5 = new JLabel();
    private final JLabel jLabel6 = new JLabel();
    private final JTextField jTextField1 = new JTextField();
    // End of variables declaration//GEN-END:variables

    private void initListners() {
        DocumentListener dl = new DocumentListener() {
            @Override public void insertUpdate(DocumentEvent e) {
                jButton1.setEnabled(checkInterval() && validateFunc());
            }

            @Override public void removeUpdate(DocumentEvent e) {
                jButton1.setEnabled(checkInterval() && validateFunc());
            }

            @Override public void changedUpdate(DocumentEvent e) {
                jButton1.setEnabled(checkInterval() && validateFunc());
            }
        };
        
        jTextField1.getDocument().addDocumentListener(dl);
        jFormattedTextField1.getDocument().addDocumentListener(dl);
        jFormattedTextField2.getDocument().addDocumentListener(dl);
        jFormattedTextField3.getDocument().addDocumentListener(dl);
        
        jFormattedTextField1.setValue(-3);
        jFormattedTextField3.setValue(3);
        jFormattedTextField2.setValue(0.05);
        
        jButton1.setEnabled(checkInterval() && validateFunc());
    }

    private boolean checkInterval() {
        try {
            jFormattedTextField1.commitEdit();
            jFormattedTextField2.commitEdit();
            jFormattedTextField3.commitEdit();
        } catch (ParseException ignoreMe) {
            jLabel6.setText(i18n.__("F_MONO_INVALID"));
            return false;
        }
        
        double start = ((Number)jFormattedTextField1.getValue()).doubleValue();
        double end   = ((Number)jFormattedTextField3.getValue()).doubleValue();
        double step  = ((Number)jFormattedTextField2.getValue()).doubleValue();
        boolean status = start < end && step > 0;   
        
        if (!status) {
            jLabel6.setText(i18n.__("F_MONO_INVALID"));
        } else {
            jLabel6.setText(i18n.__("F_MONO_N_VALS", Math.round((end - start) / step)));
        }
        
        return status;
    }

    private final ImageIcon warn = new ImageIcon(getClass().getResource("/res/icons/warn.png"));
    private final ImageIcon a_ok = new ImageIcon(getClass().getResource("/res/icons/a_ok.png"));
    private boolean validateFunc() {
        String expString = jTextField1.getText();
        if (expString.trim().isEmpty()) {
            jLabel2.setIcon(warn);
            return false;
        }
        
        try {
            ExpressionBuilder exp = new ExpressionBuilder(expString).variable("x");
            exp.functions(FunctionsMisc.getFunctions());
            exp.functions(FunctionsBoolean.getFunctions());
            exp.functions(FunctionsRandom.getFunctions());
            exp.operator (OperatorsComparison.getOperators());
            
            Expression e = exp.build().setVariable("x", 1);
            ValidationResult vr = e.validate();
            if (vr.isValid()) {
                jLabel2.setIcon(a_ok);
                jLabel2.setToolTipText("");
            } else {
                jLabel2.setToolTipText(i18n.__("F_MONO_CHECK_EXP"));
                jLabel2.setIcon(warn);
                return false;
            }
        } catch (Exception ex) {
            jLabel2.setToolTipText(ex.getMessage());
            jLabel2.setIcon(warn);
            return false;
        }
        return true;
    }

    public ArrayList<DatasetTableModel.Row> getData() {
        if (!out) {
            return new ArrayList<>(0);
        }
        
        double start = ((Number)jFormattedTextField1.getValue()).doubleValue();
        double end   = ((Number)jFormattedTextField3.getValue()).doubleValue();
        double step  = ((Number)jFormattedTextField2.getValue()).doubleValue();
        int nvals    = (int)Math.round((end - start) / step) + 1;
        
        ArrayList<DatasetTableModel.Row> ret = new ArrayList<>(nvals);
        
        String expString = jTextField1.getText();
        try {
            ExpressionBuilder exp = new ExpressionBuilder(expString).variable("x");
            exp.functions(FunctionsBoolean.getFunctions());
            exp.functions(FunctionsMisc.getFunctions());
            exp.functions(FunctionsRandom.getFunctions());
            exp.operator (OperatorsComparison.getOperators());
            Expression f = exp.build(true);
            
            for (double x = start; x <= end; x += step) {
                ret.add(new DatasetTableModel.Row(false, x, f.setVariable("x", x).evaluate()));
            }
            
            father.info(
                "Evaluating: '%s' in [%f,%f] with step %f", 
                expString, start, end, step
            );
        } catch (Exception ex) {
            father.error(
                "Error evaluating: '%s' in [%f,%f] with step %f (%s)", 
                expString, start, end, step, ex.getMessage()
            );
            jLabel2.setToolTipText(ex.getMessage());
            jLabel2.setIcon(warn);
        }
        
        return ret;
    }
}
